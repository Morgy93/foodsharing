variables:
  # https://docs.docker.com/engine/userguide/storagedriver/selectadriver/
  # https://gitlab.com/gitlab-org/gitlab-ce/issues/19971
  DOCKER_DRIVER: overlay
  GIT_CLONE_PATH: $CI_BUILDS_DIR/app
  MYSQL_ROOT_PASSWORD: root
  TZ: Europe/Berlin

.defaults: &defaults
  tags:
  - shared
  - linux
  image: registry.gitlab.com/foodsharing-dev/images/ci:3


.ssh: &ssh
  before_script:
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$DEPLOY_SSH_KEY")
  - mkdir -p ~/.ssh
  # For Docker builds disable host key checking. Be aware that by adding that
  # you are suspectible to man-in-the-middle attacks.
  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

.deploy: &deploy
  <<: *defaults
  # run it on our foodsharing ci server
  tags:
  - non-shared
  <<: *ssh
  stage: deploy
  dependencies:
  - build:frontend
  - build:backend
  - build:backend-chat
  script:
  - (cd deployer && composer install)
  - deployer/vendor/bin/dep deploy $CI_ENVIRONMENT_NAME --revision $CI_COMMIT_SHA
  - ./scripts/deploy.notifyslack.sh

stages:
- triage
- outdated
- build
- test
- deploy

triage:
  image: ruby:2.6.5-alpine
  stage: triage
  script:
  - gem install gitlab-triage
  - gitlab-triage --token $API_TOKEN --project-id $CI_PROJECT_PATH
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_JOB == "triage"
    when: always
  tags:
  - shared
  - linux
  - ruby

outdated:
  <<: *defaults
  stage: outdated
  script:
  # unfortunately "composer outdated -D" only works if you have installed the dependencies :/
  - composer install --verbose --prefer-dist --no-progress --no-interaction --classmap-authoritative --no-suggest --no-scripts --ignore-platform-reqs
  - ./scripts/outdated-notify
  cache:
    key: outdated:v1
    paths:
    - vendor
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_JOB == "outdated"
    when: always
  tags:
  # run on our server where we likely have the image already
  - non-shared

build:backend-chat:
  <<: *defaults
  rules:
  - if: $CI_COMMIT_BRANCH == 'master' || $CI_COMMIT_BRANCH == 'production'
  - if: $CI_MERGE_REQUEST_ID
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  image: node:13.10.1-alpine
  stage: build
  script:
  - (cd chat && yarn && yarn lint)
  cache:
    key: chat:build:v2
    paths:
    - chat/node_modules
  artifacts:
    expire_in: 1 week
    paths:
    - chat/node_modules

build:frontend:
  <<: *defaults
  rules:
  - if: $CI_COMMIT_BRANCH == 'master' || $CI_COMMIT_BRANCH == 'production'
  - if: $CI_MERGE_REQUEST_ID
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  image: node:13.10.1-alpine
  stage: build
  script:
  - (cd client && yarn && yarn lint && yarn test && yarn build)
  cache:
    key: client:build:v2
    paths:
    - client/node_modules
  artifacts:
    expire_in: 1 week
    paths:
    - assets
    - sw.js

build:backend:
  <<: *defaults
  rules:
  - if: $CI_COMMIT_BRANCH == 'master' || $CI_COMMIT_BRANCH == 'production'
  - if: $CI_MERGE_REQUEST_ID
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  image: registry.gitlab.com/foodsharing-dev/images/php:4
  stage: build
  script:
    - composer install --verbose --prefer-dist --no-progress --no-interaction --no-suggest --no-scripts --ignore-platform-reqs
    - vendor/bin/php-cs-fixer fix --dry-run --diff --diff-format udiff --verbose --ansi
    - vendor/bin/parallel-lint --no-progress --exclude vendor .
    - vendor/bin/phpstan analyse --memory-limit=768M --no-progress
    - composer install --verbose --prefer-dist --no-progress --no-interaction --no-dev --classmap-authoritative --no-suggest --no-scripts --ignore-platform-reqs
    - composer dump-autoload --classmap-authoritative
    - mkdir assets
    - FS_ENV=dev bin/console assets:install
  cache:
    key: backend:build:v1
    paths:
    - vendor
    - .php_cs.cache
  artifacts:
    expire_in: 1 week
    paths:
    - assets
    - vendor

build:docs:
  <<: *defaults
  image: node:13.10.1-alpine
  stage: build
  script:
  - yarn global add gitbook-cli
  - gitbook install docs
  - gitbook build docs docs/dist
  cache:
    key: build-docs
    paths:
    - docs/node_modules
  artifacts:
    expire_in: 1 week
    paths:
    - docs/dist
  rules:
  - if: $CI_COMMIT_BRANCH == 'master'
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never

test:
  <<: *defaults
  # only run tests for MR, not for the target branch. While this might show to be dangerous, it also allows us to
  # deploy without relying on potentially flaky tests
  rules:
  - if: $CI_MERGE_REQUEST_ID
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  # run it on our foodsharing ci server
  tags:
  - non-shared
  script:
  - composer validate --no-check-all --strict
  - ./scripts/ci.test
  after_script:
  # collect artifacts
  - docker cp foodsharing_ci_selenium:/home/seluser/Downloads tests/_output/ || true
  - docker cp foodsharing_ci_codeception:/app/tests/_output/ tests/_output || true
  - docker logs foodsharing_ci_app --since 15m --timestamps &> tests/_output/logs-app.txt || true
  - docker logs foodsharing_ci_mailqueuerunner --since 15m --timestamps &> tests/_output/logs-mailqueuerunner.txt || true
  # stop/kill all the containers
  - FS_ENV=ci ./scripts/rm
  # collect any test output
  artifacts:
    expire_in: 1 month
    when: always
    paths:
    - tests/_output

test:combined:
  <<: *defaults
  image: registry.gitlab.com/foodsharing-dev/images/ci_combined:1
  services:
    - name: redis:redis:5.0.8-alpine
      alias: redis
    - name: registry.gitlab.com/foodsharing-dev/images/db/dev:1.4
      alias: db
    - name: registry.gitlab.com/foodsharing-dev/images/selenium:1.4
      alias: selenium
    - name: djfarrelly/maildev
      alias: maildev
      command: ["bin/maildev",  "--web 80", "--smtp 25", "--hide-extensions STARTTLS"]

      # only run tests for MR, not for the target branch. While this might show to be dangerous, it also allows us to
  # deploy without relying on potentially flaky tests
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
  # run it on our foodsharing ci server
  tags:
    - non-shared
  dependencies:
    - build:frontend
    - build:backend
    - build:backend-chat
  script:
    - cp /app/docker/ci_combined/supervisor_chat.conf /etc/supervisor/conf.d/
    - /start.sh &; sleep 2
    - composer install --verbose --prefer-dist --no-progress --no-interaction --no-suggest --no-scripts --ignore-platform-reqs
    - mysql -u root -p root -h db --execute="drop database if exists foodsharing; create database foodsharing"
    - cat migrations/migrations/initial.sql migrations/static.sql migrations/27-profilchange.sql migrations/27-verify.sql migrations/incremental-* | mysql -u root -p root -h db
    - vendor/bin/codecept run --xml --html
  after_script:
  # collect any test output
  artifacts:
    expire_in: 1 month
    when: always
    paths:
      - tests/_output

deploy:beta:
  <<: *deploy
  environment:
    name: beta
    url: https://beta.foodsharing.de
  rules:
  - if: $CI_COMMIT_BRANCH == 'master'
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never

deploy:production:
  <<: *deploy
  environment:
    name: production
    url: https://foodsharing.de
  rules:
  - if: $CI_COMMIT_BRANCH == 'production'
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never

deploy:docs:
  <<: *defaults
  <<: *ssh
  stage: deploy
  dependencies:
  - build:docs
  script:
  - rsync -avz --delete docs/dist/ "deploy@devdocs.foodsharing.network:/var/www/devdocs/htdocs/"
  environment:
    name: docs
    url: https://devdocs.foodsharing.network
  rules:
  - if: $CI_COMMIT_BRANCH == 'master'
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
