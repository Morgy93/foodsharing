# this must come before the variables section,
# so variables specified there can override defaults specified in the template
include:
  - template: Dependency-Scanning.gitlab-ci.yml

# to make the previous template work with kanthaus-runner, which expects these tags
dependency_scanning:
  tags:
  - shared
  - linux

variables:
  # https://docs.docker.com/engine/userguide/storagedriver/selectadriver/
  # https://gitlab.com/gitlab-org/gitlab-ce/issues/19971
  DOCKER_DRIVER: overlay


.defaults: &defaults
  tags:
  - shared
  - linux
  image: registry.gitlab.com/foodsharing-dev/images/ci:7


.ssh: &ssh
  before_script:
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$DEPLOY_SSH_KEY")
  - mkdir -p ~/.ssh
  # For Docker builds disable host key checking. Be aware that by adding that
  # you are suspectible to man-in-the-middle attacks.
  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

.deploy: &deploy
  <<: *defaults
  # run it on our foodsharing ci server
  tags:
  - non-shared
  <<: *ssh
  stage: deploy
  dependencies:
  - build:frontend
  - build:backend
  - build:backend-chat
  script:
  - (cd deployer && composer install)
  - deployer/vendor/bin/dep deploy $CI_ENVIRONMENT_NAME --revision $CI_COMMIT_SHA
  - ./scripts/deploy.notifyslack.sh

stages:
- outdated
- build
- test
- deploy

outdated:
  <<: *defaults
  stage: outdated
  script:
  # unfortunately "composer outdated -D" only works if you have installed the dependencies :/
  - composer install --verbose --prefer-dist --no-progress --no-interaction --classmap-authoritative --no-scripts --ignore-platform-reqs
  - ./scripts/outdated-notify
  cache:
    key: outdated:v1
    paths:
    - vendor
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_JOB == "outdated"
    when: always
  tags:
  # run on our server where we likely have the image already
  - non-shared

build:backend-chat:
  <<: *defaults
  rules:
  - if: $CI_COMMIT_BRANCH == 'master' || $CI_COMMIT_BRANCH == 'production'
  - if: $CI_MERGE_REQUEST_ID
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  interruptible: true
  image: node:14.14.0-alpine3.12
  stage: build
  script:
  - (cd chat && yarn && yarn lint)
  cache:
    key: chat:build:v2
    paths:
    - chat/node_modules
  artifacts:
    expire_in: 1 week
    paths:
    - chat/node_modules

build:frontend:
  <<: *defaults
  rules:
  - if: $CI_COMMIT_BRANCH == 'master' || $CI_COMMIT_BRANCH == 'production'
  - if: $CI_MERGE_REQUEST_ID
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  interruptible: true
  image: node:14.14.0-alpine3.12
  stage: build
  script:
  - (cd client && yarn && yarn lint && yarn test && yarn build)
  cache:
    key: client:build:v2
    paths:
    - client/node_modules
  artifacts:
    expire_in: 1 week
    paths:
    - assets
    - sw.js

build:backend:
  <<: *defaults
  rules:
  - if: $CI_COMMIT_BRANCH == 'master' || $CI_COMMIT_BRANCH == 'production'
  - if: $CI_MERGE_REQUEST_ID
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  interruptible: true
  image: registry.gitlab.com/foodsharing-dev/images/php:7.4.11
  stage: build
  script:
    - composer validate --no-check-all --no-check-publish
    - composer install --verbose --prefer-dist --no-progress --no-interaction --no-scripts --ignore-platform-reqs
    - (cd phinx && composer install --no-progress --no-interaction --no-scripts --ignore-platform-reqs)
    - vendor/bin/php-cs-fixer fix --dry-run --diff --diff-format udiff --verbose --ansi
    - vendor/bin/parallel-lint --no-progress --exclude vendor .
    - FS_ENV=dev vendor/bin/phpstan analyse --memory-limit=768M --no-progress
    - composer install --verbose --prefer-dist --no-progress --no-interaction --no-dev --classmap-authoritative --no-scripts --ignore-platform-reqs
    - composer dump-autoload --classmap-authoritative
    - mkdir assets
    - FS_ENV=dev bin/console assets:install
  cache:
    key: backend:build:v1
    paths:
    - vendor
    - .php_cs.cache
  artifacts:
    expire_in: 1 week
    paths:
    - assets
    - vendor

build:docs:
  <<: *defaults
  image:
    name: peaceiris/mdbook:v0.4.7
    entrypoint: [ "" ]
  stage: build
  script:
    - mdbook build docs
  artifacts:
    expire_in: 1 week
    paths:
    - docs/dist
  rules:
  - if: $CI_COMMIT_BRANCH == 'master'
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never

test:
  <<: *defaults
  interruptible: true
  variables:
    MYSQL_ROOT_PASSWORD: root
    MYSQL_INITDB_SKIP_TZINFO: 1
    TZ: Europe/Berlin
    FF_NETWORK_PER_BUILD: 1
    REDIS_HOST: redis
    FS_ENV: test
  image: registry.gitlab.com/foodsharing-dev/images/php:7.4.11
  services:
# Note: Gitlab runner will mark a lot of service healthchecks as failed. This is a bug that will partly be addressed with the upcoming release of the gitlab-runner. It is also due to our configuration, e.g. the chat container not exposing ports but listed as a service. Unfortunately, health check cannot be disabled.
    - name: redis:6.0.8-alpine
      alias: redis
    - name: registry.gitlab.com/foodsharing-dev/images/db/test:2
      alias: db
    - name: selenium/standalone-chrome:3.141.59-20200515
      alias: selenium
    - name: maildev/maildev
      alias: maildev
      command: ["bin/maildev",  "--web", "80", "--smtp", "25", "--hide-extensions", "STARTTLS"]
    - name: node:14.14.0-alpine3.12
      alias: chat
      # Chat service runs with code that gets checked out later by the main build job. We use a file to synchronize that, so start chat service only when that file has been recreated.
      command: ["/bin/sh", "-c", 'rm $CI_PROJECT_DIR/code_updated; while [ ! -e $CI_PROJECT_DIR/code_updated ]; do sleep 1; done; cd /builds/foodsharing-dev/foodsharing/chat && yarn ts-node src/index.ts 0.0.0.0']
    - name: registry.gitlab.com/foodsharing-dev/images/web_ci:1.10
      alias: web

  # only run tests for MR, not for the target branch. While this might show to be dangerous, it also allows us to
  # deploy without relying on potentially flaky tests
  rules:
  - if: $CI_MERGE_REQUEST_ID
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  dependencies:
    - build:frontend
    - build:backend
    - build:backend-chat

  script:
    # Create file to notify chat container that code is up to date
    - touch $CI_PROJECT_DIR/code_updated
    - ./scripts/ci.test
  artifacts:
    expire_in: 1 month
    when: always
    paths:
    - tests/_output

deploy:beta:
  <<: *deploy
  environment:
    name: beta
    url: https://beta.foodsharing.de
  rules:
  - if: $CI_COMMIT_BRANCH == 'master'
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never

deploy:production:
  <<: *deploy
  environment:
    name: production
    url: https://foodsharing.de
  rules:
  - if: $CI_COMMIT_BRANCH == 'production'
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never

deploy:docs:
  <<: *defaults
  <<: *ssh
  stage: deploy
  dependencies:
  - build:docs
  script:
  - rsync -avz --delete docs/dist/ "deploy@devdocs.foodsharing.network:/var/www/devdocs/htdocs/"
  environment:
    name: docs
    url: https://devdocs.foodsharing.network
  rules:
  - if: $CI_COMMIT_BRANCH == 'master'
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
