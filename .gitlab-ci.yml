image: registry.gitlab.com/foodsharing-dev/images:ci

stages:
  - test
  - deploy

cache:
  # shared cache for all branches
  key: "$CI_PROJECT_NAME"
  paths:
    - vendor/
    - chat/node_modules/

test:
  script:
  
  # make cache dirs
  - mkdir -p vendor chat/node_modules/

  # run the actual tests
  - ./scripts/ci.test

  # collect the contents to cache
  - rm -rf vendor chat/node_modules/
  - docker cp foodsharing_ci_app:/app/vendor vendor
  - docker cp foodsharing_ci_chat:/app/chat/node_modules chat/node_modules

  # stop/kill all the containers
  - FS_ENV=ci ./scripts/rm

  # run it on our foodsharing ci server
  tags:
  - non-shared

  # collect any test output
  artifacts:
    when: always
    paths:
    - tests/_output

deploy:
  stage: deploy
  script:
    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$DEPLOY_SSH_KEY")

    # For Docker builds disable host key checking. Be aware that by adding that
    # you are suspectible to man-in-the-middle attacks.
    # WARNING: Use this only with the Docker executor, if you use it with shell
    # you will overwrite your user's SSH config.
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    # In order to properly check the server's host key, assuming you created the
    # SSH_SERVER_HOSTKEYS variable previously, uncomment the following two lines
    # instead.
    # - mkdir -p ~/.ssh
    # - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
    - scp deploy.sh gitolite@banana.foodsharing.de:/var/www/lmr-beta
    - ssh gitolite@banana.foodsharing.de 'cd /var/www/lmr-beta/www; ../deploy.sh'

  only:
    - master



variables:
  # https://docs.docker.com/engine/userguide/storagedriver/selectadriver/
  # https://gitlab.com/gitlab-org/gitlab-ce/issues/19971
  DOCKER_DRIVER: overlay
