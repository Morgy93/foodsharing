{
    "introduction": [
        "This documentation is automatically generated by information from MySQL and the PHP code.",
        "",
        "The documentation inform you as developer about the database structure and column meaning.",
        "Additional for the development of new API or backend parts, the module table usage (extracted from PHP codebase)",
        "below provides helpful information. The provided information may help to find already existing queries, gateways,",
        "and/or the best location for a new query/function.",
        ""
    ],
    "tables": [
        {
            "identifier": "fs_abholer",
            "description": "Stores filled pickup slots, describes by who fetches when, where and if confirmed, needed to generate statistics (count, but not weight).",
            "todos": [
                "Have deleted entries from *fs_foodsaver* and *fs_betrieb* reappear.",
                "Hide deleted fs_betrieb on existing map",
                "Don't care about that in existing code. Used to show pickup history, but broken old entries seem fine.",
                "Document: Add to database as comment (1: Confirmed, 0: Not confirmed)",
                "Clarify: Why is this an integer and not a boolean?"
            ],
            "columns": {
                "foodsaver_id": {
                    "weakForeignKey": {
                        "table": "fs_foodsaver",
                        "column": "id"
                    }
                },
                "betrieb_id": {
                    "weakForeignKey": {
                        "table": "fs_betrieb",
                        "column": "id"
                    }
                },
                "confirmed": {
                    "description": "1: Confirmed, 0: Not confirmed"
                }
            }
        },
        {
            "identifier": "fs_abholzeiten",
            "description": "Contains information about regurlary reoccuring pickup slots.",
            "todos": [
                "Document: Add to database as column (Dow) comment: Day of week (1=Monday, 0=Sunday)",
                "Document: Add to database as column (Time) comment: When on the day the pickup is",
                "Document: Add to database as column (Fetcher) comment: Number of slots (>= 0, >= 1 enforced by frontend)",
                "Clarify: Where are additional single pickup slots are stored?",
                "Remove all non-existent references to *fs_betrieb*, add `ON DELETE CASCADE`.",
                "Add foreign key relationship to *fs_betrieb* Reasoning: The data only affects future pickups that will not occur in case a store is removed."
            ],
            "columns": {
                "betrieb_id": {
                    "weakForeignKey": {
                        "table": "fs_betrieb",
                        "column": "id"
                    }
                },
                "dow": {
                    "description": "Day of week (1=Monday, 0=Sunday)"
                },
                "time": {
                    "description": "Time when on the day the pickup is"
                },
                "fetcher": {
                    "description": "Number of slots (> 0, limited by frontend currently 8)"
                }
            }
        },
        {
            "identifier": "fs_apitoken",
            "description": "User tokens for ICS/ICAL/WebCal access to calendar of future events/pickups.",
            "todos": [
                "Remove tokens for not existing users",
                "add foreign key relationship to *fs_foodsaver* as well as `ON DELETE CASCADE`."
            ],
            "columns": {
                "foodsaver_id": {
                    "description": "Owner of the token and identifier for the calendar"
                },
                "token": {
                    "description": "Access token, hex-number from openssl."
                }
            }
        },
        {
            "identifier": "fs_bezirk",
            "description": "Stores districts as well as workinggroups (differentiated by type column) (referred to as 'group' or 'district' in this document)",
            "todos": [
                "Remove unused columns email_pass, conversation_id",
                "Clarify: Field description",
                "Clarify: Extract typs from `src\\Modules\\Core\\DBConstants\\Region\\Type`",
                "CÃ¶arify: Use of moderated? $region['moderated'] || in_array($region['type'], [Type::BIG_CITY, Type::FEDERAL_STATE, Type::COUNTRY]);"
            ],
            "columns": {
                "has_children": {
                    "description": "Is set when ID is set in parent_id of other row"
                },
                "mailbox_id": {
                    "description": "Id of user related mailbox",
                    "weakForeignKey": {
                        "table": "fs_mailbox",
                        "column": "id"
                    }
                },
                "apply_type": {
                    "description": "Defines join conditions for Working-Groups (@Region::ApplyType)"
                },
                "conversation_id": {
                    "description": "**Unused**"
                },
                "moderated": {
                    "description": "**Unused? Only select found no insert or update ***"
                }
            }
        },
        {
            "identifier": "fs_foodsaver_has_bezirk",
            "description": "Describes which foodsaver is in which group/district/workgroups and regions membership",
            "todos": [
                "Remove broken data",
                "Add foreign key relationships to *fs_foodsaver* and *fs_bezirk*"
            ],
            "columns": {
                "added": {
                    "description": "Date of insert"
                },
                "active": {
                    "description": "*Unused? No code found which write '0'*"
                },
                "application": {
                    "description": "Addition information about the foodsaver (like skills, possible time, ...)"
                }
            }
        },
        {
            "identifier": "fs_theme",
            "description": "Threads in the forum.",
            "todos": [
                "nothing as threads from deleted users should be kept"
            ]
        },
        {
            "identifier": "fs_foodsaver",
            "description": "Describes the user in the foodsharing system. Therefore it contains profile, role and statistics.",
            "todos": [
                "bezirk_id ('home district') is 0 for a lot of users. Should be NULL. As we don't need this soon in new backend, care later.",
                "Document: Add to database as column (deleted_at) comment: `deleted_at`: deletion day of account, if `NULL`, account is active",
                "new_bezirk: Could be removed? Currently no usage found. (unset in SettingsControl and initial_migration)",
                "want_new: Could be removed? Currently no usage found. (initial_migration)",
                "Clarify: Is it possible that a community member is in the role ogra or site_admin and not part of the orga team?",
                "Drop unused columns from database and remove rests from codebase"
            ],
            "columns": {
                "new_bezirk": {
                    "description": "**Unused**"
                },
                "want_new": {
                    "description": "**Unused**"
                },
                "admin": {
                    "description": "**Unused? I think replaced by SITE_ADMIN role. Found it only in SELECT but no write and Foodsharing Test helper createOrga sets two fields with simular values.**"
                },
                "active": {
                    "description": "E-Mail activation after registration is completed (True: E-Mail is verified, False: verification e-mail feedback is pending)"
                },
                "anmeldedatum": {
                    "description": "Date of registaration"
                },
                "privacy_notice_accepted_date": {
                    "description": "Documentation modification date of privacy notice which the user accetped "
                },
                "privacy_policy_accepted_date": {
                    "description": "Documentation modification date of privacy policy which the user accetped "
                },
                "newsletter": {
                    "description": "User subscribes the newsletter"
                },
                "orgateam": {
                    "description": "Unused? Defines which member is part of the orga team (meaning orgateam is unclear)"
                },
                "rolle": {
                    "description": "Describes the type of member in the foodsharing community system @Foodsaver::Role"
                },
                "verified": {
                    "description": "User is verified to by part of the foodsharing community (True: Verified, False: Not verified or lost verification)"
                },
                "last_pass": {
                    "description": "Last generation of passport"
                },
                "position": {
                    "description": "Free text description of position in foodsharing community (public visible)"
                },
                "type": {
                    "description": "**Unused? I only found one SELECT but no write**"
                },
                "id": {
                    "description": "Unique id of user in foodsharing community"
                },
                "bezirk_id": {
                    "description": "Id of home destrict",
                    "weakForeignKey": {
                        "table": "fs_bezirk",
                        "column": "id"
                    }
                },
                "mailbox_id": {
                    "description": "Id of user related mailbox",
                    "weakForeignKey": {
                        "table": "fs_mailbox",
                        "column": "id"
                    }
                },
                "password": {
                    "description": "User login password hash"
                },
                "homepage": {
                    "description":  "URL to user own homepage"
                },
                "geb_datum": {
                    "description": "birthday of user"
                },
                "photo": {
                    "description": "URL to user image ('/api/uploads' '/images/) Path is different depending on upload way"
                },
                "geschlecht": {
                    "description": "Gender of user (@Foodsaver::Gender)"
                },
                "lat": {
                    "description": "Geo position latitude of user home"
                },
                "lon": {
                    "description": "Geo position longitude of user home"
                },
                "plz": {
                    "description": "Zip code of user home"
                },
                "stadt": {
                    "description": "City name of user home"
                },
                "anschrift": {
                    "description": "Address (street and house number) of user home"
                },
                "telefon": {
                    "description": "phone number of user"
                },
                "handy": {
                    "description": "mobile phone number of user"
                },
                "name": {
                    "description": "First name of user"
                },
                "nachname": {
                    "description": "Last name of user"
                },
                "about_me_public": {
                    "description": "User provided description text for public accessable parts."
                },
                "about_me_intern": {
                    "description": "User provided description text for community internal accessable parts."
                },
                "email": {
                    "description": "E-Mail address which is used for registration and newsletter"
                },
                "token": {
                    "description": "Verification code which is send to user during registration"
                },
                "infomail_message": {
                    "description": "True if the user have subscription for info mails like chat notifications."
                },
                "last_login": {
                    "description": "Timestamp of the last successful login."
                },
                "contact_public": {
                    "description": "**Unused (Hidden feature) User can be contacted public via mail form.**"
                },
                "option": {
                    "description": "key value store (deactivated activity-listings)"
                },
                "beta": {
                    "description": "**Unused? NO referene in code found.**"
                },
                "deleted_at": {
                    "description": "Date of accounts was deleted."
                },
                "sleep_msg": {
                    "description": "Message about the reason of sleeping."
                },
                "sleep_status": {
                    "description": "Kind of sleeping (@Foodsaver::SleepStatus)"
                },
                "sleep_from": {
                    "description": "Date of sleep will begin"
                },
                "sleep_until": {
                    "description": "Date of expected sleeping ends."
                },
                "stat_fetchweight": {
                    "description": "Fetch weight in kg"
                },
                "stat_fetchcount": {
                    "description": "Count of fetches the user have confirmed in total."
                },
                "stat_ratecount": {
                    "description": "**Unused**"
                },
                "stat_rating": {
                    "description": "**Unused**"
                },
                "stat_postcount": {
                    "description": "Count of total post fs_theme_post, fs_wallpost and fs_betrieb_notiz the user created"
                },
                "stat_buddycount": {
                    "description": "Statistic count of the confirmed buddies"
                },
                "stat_bananacount": {
                    "description": "Count of recived bananas the user have."
                },
                "stat_fetchrate": {
                    "description": "(1 - 'confirmed but missed fetchs' / 'confirmed fetches') * 100 in procent "
                },
                "data": {
                    "description": "**Unused??**"
                },
                "quiz_rolle": {
                    "description": "@Foodsaver::Role of quiz that the user have already successful done. (Hard coded levels exist: Role::AMBASSADOR, Role::STORE_MANAGER, Role::FOODSAVER)"
                }
            }
        },
        {
            "identifier": "fs_basket",
            "description": "Lists all foodbaskets.",
            "todos": [
                "Check code to never display foodbaskets from removed users except to admins.",
                "Clarify: Meaning of status == Basket::Status",
                "Clarify: Meaning of fs_id",
                "Clarify: Meaning of appost",
                "Clarify: Meaning of contact_type",
                "Clarify: Meaning of location_type",
                "Clarify: Meaning of weight unit",
                "Clarify: Meaning of picture",
                "Clarify: Meaning of time",
                "Clarify: Meaning of update",
                "Clarify: Meaning of until",
                "Clarify: Meaning of fetchtime",
                "Clarify: Owner of tel",
                "Clarify: Owner of handy"
            ],
            "columns": {
                "foodsaver_id": {
                    "weakForeignKey": {
                        "table": "fs_foodsaver",
                        "column": "id"
                    }
                },
                "bezirk_id": {
                    "weakForeignKey": {
                        "table": "fs_bezirk",
                        "column": "id"
                    }
                },
                "contact_type": {
                    "description": ""
                },
                "location_type": {
                    "description": "Fix set to 0"
                },
                "status": {
                    "description": "@Basket::Status"
                },
                "weight": {
                    "description": "Smaller <0kg = 3kg"
                },
                "time": {
                    "description": "Creation datetime"
                },
                "update": {
                    "description": ""
                },
                "until": {
                    "description": "Basket is present until datetime expires"
                },
                "fetchtime": {
                    "description": ""
                },
                "description": {
                    "description": ""
                },
                "picture": {
                    "description": ""
                },
                "tel": {
                    "description": ""
                },
                "handy": {
                    "description": ""
                },
                "lat": {
                    "description": "Basket location latitude"
                },
                "lon": {
                    "description": "Basket location longitude"
                },
                "fs_id": {
                    "description": ""
                },
                "appost": {
                    "description": ""
                }
            }
        },
        {
            "identifier": "fs_betrieb_team",
            "description": "Defines foodsaver team embers with pickup store provided food and statistic.",
            "todos": [
                "Have deleted entries from *fs_foodsaver* and *fs_betrieb* reappear.",
                "Clarify: Describe the meaning of APPLIED_FOR_TEAM and jumber",
                "Clarify: Could a managing/verantworktlicher can pick up from a store?",
                "Clarify: What are Biebs? StoreGateway::getBiebsForStore()",
                "Clarify: Why does the table contains a id, is the foodsaver_id and betrieb_id not unique enought",
                "Clarify: Why are stats directly part table?",
                "Clarify: Is it possible to be black listed for a store or a team?"
            ],
            "columns": {
                "foodsaver_id": {
                    "weakForeignKey": {
                        "table": "fs_foodsaver",
                        "column": "id"
                    }
                },
                "betrieb_id": {
                    "weakForeignKey": {
                        "table": "fs_betrieb",
                        "column": "id"
                    }
                },
                "verantwortlich": {
                    "description": "@StoreTeam::Responsible"
                },
                "active": {
                    "description": "@StoreTeam::MembershipStatus"
                },
                "betrieb_status_id": {
                    "description": "@Status::CooperationStatus"
                }
            }
        },
        {
            "identifier": "fs_usernotes_has_wallpost",
            "description": "connects organotes on users with wallposts",
            "todos": [
                "recreate missing users",
                "remove broken entries (for wallposts)"
            ]
        },
        {
            "identifier": "fs_theme_post",
            "description": "Stores posts in themes",
            "todos": [
                "Recreate users",
                "Remove broken data (for themes, not users)",
                "Add FK to themes"
            ]
        },
        {
            "identifier": "fs_theme_follower",
            "description": "stores who follows themes",
            "todos": [
                "remove broken data (as follower information is irrelevant for broken XY)",
                "Add FK"
            ]
        },
        {
            "identifier": "fs_stat_abholmengen",
            "description": "Stores statistics per store (maybe broken implementation?)",
            "todos": [
                "add FK to store"
            ]
        },
        {
            "identifier": "fs_rating",
            "description": "Stores trust bananas",
            "todos": [
                "remove broken data (as we don't want to have trust bananas from/for deleted users)",
                "Add FK"
            ]
        },
        {
            "identifier": "fs_quiz_session",
            "description": "Each try (by users) of a quiz (session)",
            "todos": [
                "remove broken data"
            ]
        },
        {
            "identifier": "fs_question_has_wallpost",
            "description": "Relates wallposts to questions",
            "todos": [
                "remove broken data",
                "FK to *fs_question*, *fs_wallpost*, `ON DELETE CASCADE`"
            ]
        },
        {
            "identifier": "fs_question_has_quiz",
            "description": "Relates questions <-> quiz",
            "todos": [
                "remove broken data",
                "FK to *fs_quiz*, *fs_question*, `ON DELETE CASCADE`"
            ]
        },
        {
            "identifier": "fs_question",
            "description": "Questions (for quiz)"
        },
        {
            "identifier": "fs_pass_request",
            "description": "Password change/forgot requestsRelates questions <-> quiz",
            "todos": [
                "remove broken/old data",
                "FK for foodsaver_id, `ON DELETE CASCADE`"
            ]
        },
        {
            "identifier": "fs_pass_gen",
            "description": "Logs which ID cards have been generated",
            "todos": [
                "remove broken data (foodsaver_id), readd missing (bot_id)",
                "FK for foodsaver_id, `ON DELETE CASCADE`",
                "handle emtpy users correctly (bot_id)"
            ]
        },
        {
            "identifier": "fs_msg",
            "description": "Conversation messages",
            "todos": [
                "Remove broken data (conversations), readd missing users",
                "FK on *fs_conversation*, `ON DELETE CASCADE`"
            ]
        },
        {
            "identifier": "fs_message_tpl",
            "description": "Email templates",
            "todos": [
                "language switcher implementation is unused and broken"
            ]
        },
        {
            "identifier": "fs_mailchange",
            "description": "Requests to change the emailaddress",
            "todos": [
                "Remove broken / old data",
                "FK on *fs_foodsaver*, `ON DELETE CASCADE`",
                "There is a recent entry with foodsaver_id = 0. How did that get here?"
            ]
        },
        {
            "identifier": "fs_mailbox_message",
            "description": "emails",
            "todos": [
                "remove brokendata",
                "FK on *fs_mailbox*, `ON DELETE CASCADE`"
            ]
        },
        {
            "identifier": "fs_mailbox",
            "description": "Stores mailbox names (for email mailboxes)"
        },
        {
            "identifier": "fs_mailbox_member",
            "description": "Maps additional mailbox access for users (e.g. granting custom mailboxes or group ones)",
            "todos": [
                "Remove brokendata",
                "FK on *fs_mailbox*, *fs_mailbox_member*, `ON DELETE CASCADE`"
            ]
        },
        {
            "identifier": "fs_foodsaver_has_fetchdate",
            "description": "Empty table",
            "todos": [
                "Delete"
            ]
        },
        {
            "identifier": "fs_foodsaver_has_wallpost",
            "description": "Wallposts on user profile",
            "todos": [
                "Remove broken data",
                "FK on *fs_foodsaver*, *fs_wallpost*, `ON DELETE CASCADE`"
            ]
        },
        {
            "identifier": "fs_fsreport_has_wallpost",
            "description": "Stores notes on abuse reports",
            "todos": [
                "remove broken data",
                "FK on *fs_report*, *fs_wallpost*, `ON DELETE CASCADE`"
            ]
        },
        {
            "identifier": "fs_kette",
            "description": "Store chains"
        },
        {
            "identifier": "fs_lebensmittel",
            "description": "Store different kinds of food to be linked with individual stores. Only ever implemented as setter, don't care for now."
        },
        {
            "identifier": "fs_foodsaver_archive",
            "description": "Archive table to hold removed users for admin purposes",
            "todos": [
                "Move to fs_foodsaver_archive3",
                "Recreate with same structure as fs_foodsaver"
            ]
        },
        {
            "identifier": "fs_foodsaver_change_history",
            "description": "Logs all changes to personal data in foodsaver  table",
            "todos": [
                "Do not use indices as this should persist deletions (as one reason for it was to be able to detect abuse)"
            ]
        },
        {
            "identifier": "fs_foodsaver_has_bell",
            "description": "Stores bell <-> user relationship",
            "todos": [
                "Remove broken data",
                "Add foreign key relationships to *fs_foodsaver* and *fs_bell*"
            ]
        },
        {
            "identifier": "fs_foodsaver_has_contact",
            "description": "Relates contacts (email addresses, see above) to users",
            "todos": [
                "Remove broken data",
                "Add FK to *fs_foodsaver*, *fs_contact*"
            ]
        },
        {
            "identifier": "fs_foodsaver_has_conversation",
            "description": "Relates conversations to foodsavers. Care: It is also used to look up conversations by user",
            "todos": [
                "Reinsert missing foodsaver, add FK to *fs_conversation* (not to user)",
                "Fix code to handle deleted users correctly"
            ]
        },
        {
            "identifier": "fs_foodsaver_has_event",
            "description": "Relates users to events.",
            "todos": [
                "Remove broken data",
                "FK on *fs_foodsaver*, *fs_event*, `ON DELETE CASCADE`"
            ]
        },
        {
            "identifier": "fs_foodsaver_has_fairteiler",
            "description": "Empty table",
            "todos": [
                "Delete"
            ]
        },
        {
            "identifier": "fs_botschafter",
            "description": "Notes the ambassador/admin attribute on a group membership.",
            "todos": [
                "remove broken entries",
                "add foreign key relationships on *fs_bezirk* and *fs_foodsaver*"
            ]
        },
        {
            "identifier": "fs_buddy",
            "description": "'I know XY' connection/friendship relation.",
            "todos": [
                "investigate, why there are lots of '0' entries remove broken entries",
                "add foreign key relationships on *fs_foodsaver* with `ON DELETE CASCADE` trigger"
            ]
        },
        {
            "identifier": "fs_contact",
            "description": "Stores email addresses gathered from incoming/outgoing emails that will be used for autocompletion."
        },
        {
            "identifier": "fs_content",
            "description": "'Mini-CMS' content table that is used to generate some pages as well as sections on some pages."
        },
        {
            "identifier": "fs_conversation",
            "description": "Conversation table",
            "todos": [
                "get rid of API module",
                "switch over to foodsharing-API backend to get rid of denormalized columns.",
                "By that, also stop htmlentities encoding. On the decoding side, implement time aware message body decoders.",
                "Denormalized fields usage: listConversations (member, last)",
                "remove last_foodsaver_id (unused, easy)",
                "remove heartbeat code (that is not used since we have socket.io)"
            ]
        },
        {
            "identifier": "fs_email_blacklist",
            "description": "Contains email addresses that are not allowed to signup (needs database admin to maintain)"
        },
        {
            "identifier": "fs_email_status",
            "description": "Mass mailer status table (per-recipient status)",
            "todos": [
                "remove broken entries",
                "add foreign key relationships to *fs_foodsaver* and *fs_email* with `ON DELETE CASCADE`"
            ]
        },
        {
            "identifier": "fs_event",
            "description": "Contains all events",
            "todos": [
                "Regain missing users",
                "Check code fetching events to properly handle deleted users",
                "remove broken entries for fs_bezirk by setting them NULL",
                "add foreign key relationship to *fs_bezirk* (on delete set NULL)",
                "add foreign key relationship to *fs_location* (nullable)"
            ]
        },
        {
            "identifier": "fs_event_has_wallpost",
            "description": "Links wallposts on event (only communication channel for an event)",
            "todos": [
                "Remove broken entries",
                "add foreign key relationships to *fs_event* and *fs_wallpost*, `ON DELETE CASCADE`"
            ]
        },
        {
            "identifier": "fs_fairteiler",
            "description": "Lists fair share points",
            "todos": [
                "Null broken entries (should still be listable in map)",
                "add foreign key relationship to *fs_bezirk*"
            ]
        },
        {
            "identifier": "fs_fairteiler_follower",
            "description": "Links follower/responsible to food share points",
            "todos": [
                "Remove broken entries",
                "add foreign key relationships to *fs_foodsaver* and *fs_fairteiler* with `ON DELETE CASCADE`"
            ]
        },
        {
            "identifier": "fs_fairteiler_has_wallpost",
            "description": "Links wallposts to fair share points",
            "todos": [
                "Remove broken entries",
                "add foreign key relationship to *fs_fairteiler*, *fs_wallpost* with `ON DELETE CASCADE`",
                "check code that handles wallpost display to see how NULL foodsavers are handled.",
                "Reasoning: Keep wallposts from deleted users."
            ]
        },
        {
            "identifier": "fs_faq",
            "description": "Questions and answers"
        },
        {
            "identifier": "fs_faq_category"
        },
        {
            "identifier": "fs_fetchdate",
            "description": "Stores non-recurring pickup slots (just the slot, no fetcher information)",
            "todos": [
                "reinsert missing stores"
            ]
        },
        {
            "identifier": "fs_application_has_wallpost",
            "description": "Link table between applications (for groups) and the wallposts. *Design broken*: Links foodsaver ids to the wallposts, e.g. all applications a foodsaver does to somewhere",
            "todos": [
                "Remove entries for non-existing users",
                "add `ON DELETE CASCADE` to *fs_foodsaver*.",
                "Remove entries for non-existing wallposts",
                "add `ON DELETE CASCADE` to *fs_wallpost*",
                "Reasoning: Applications texts for deleted users are not useful anymore"
            ]
        },
        {
            "identifier": "fs_basket_anfrage",
            "description": "Lists foodbasket requests.",
            "todos": [
                "Remove entries for non-existing users",
                "add `ON DELETE CASCADE` to *fs_foodsaver*.",
                "Remove entries for non-existing baskets",
                "add `ON DELETE CASCADE` to *fs_basket*.",
                "Reasoning: Requests for non existant users do not need to be kept, basket FK is purely defensive."
            ]
        },
        {
            "identifier": "fs_basket_has_art",
            "description": "Combines foodbaskets with different types of food. *Unused*: Has to be entered but is never evaluated.",
            "todos": [
                "remove in code (in future), leave database as is (for now)"
            ]
        },
        {
            "identifier": "fs_basket_has_types",
            "description": "See fs_basket_has_art"
        },
        {
            "identifier": "fs_basket_has_wallpost",
            "description": "Link table between baskets and the wallposts (public)",
            "todos": [
                "Remove entries for non-existing wallposts",
                "add `ON DELETE CASCADE` to *fs_wallpost*",
                "Remove entries for non-existing baskets",
                "add `ON DELETE CASCADE` to *fs_basket*",
                "Reasoning: It is just a link table, remove entries where data is missing."
            ]
        },
        {
            "identifier": "fs_bell",
            "description": "Stores arbitrary notifications"
        },
        {
            "identifier": "fs_betrieb",
            "description": "Stores stores.",
            "todos": [
                "Conversation 108242 and 108243 missing (store 1, 2) (fixed, inserted)",
                "Link `bezirk_id` to *fs_bezirk*",
                "Care about kette_id, betrieb_kategorie_id (fixed with issue #862)"
            ],
            "columns": {
                "kette_id": {
                    "weakForeignKey": {
                        "table": "fs_kette",
                        "column": "id"
                    }
                },
                "betrieb_kategorie_id": {
                    "weakForeignKey": {
                        "table": "fs_betrieb_kategorie",
                        "column": "id"
                    }
                },
                "betrieb_status_id": {
                    "description": "@Status::CooperationStatus"
                },
                "staus": {
                    "description": "maybe unused"
                },
                "abholmenge": {
                    "description": "See @WeightHelper"
                },
                "public_time": {
                    "description": "@Store::PublicTimes"
                },
                "ueberzeugungsarbeit": {
                    "description": "@Store::ConvinceStatus"
                },
                "presse": {
                    "description": "Yes=0; No=1"
                },
                "sticker": {
                    "description": "Yes=0; No=1"
                },
                "team_status": {
                    "description": "@Status::TeamStatus"
                },
                "prefetchtime": {
                    "description": "Frequence of expected regular pickups in seconds"
                }
            }
        },
        {
            "identifier": "fs_betrieb_notiz",
            "description": "Stores wallposts on stores (independent of wallpost system)",
            "todos": [
                "Have deleted entries from *fs_foodsaver* and *fs_betrieb* reappear."
            ]
        },
        {
            "identifier": "fs_bezirk_has_theme",
            "description": "Forum: Relates threads to groups.",
            "todos": [
                "remove broken entries",
                "add foreign key relationsips on *fs_theme* and *fs_bezirk* with `ON DELETE CASCADE` trigger."
            ]
        },
        {
            "identifier": "fs_bezirk_has_wallpost",
            "todos": [
                "remove broken entries",
                "add foreign key relationships on *fs_bezirk* and *fs_wallpost* with `ON DELETE CASCADE` trigger."
            ]
        },
        {
            "identifier": "fs_blog_entry",
            "description": "Stores blog entries (there is a /news URL)"
        },
        {
            "identifier": "fs_answer",
            "description": "Stores answers to quiz.",
            "todos": [
                "Add foreign key relationship to *fs_question* as well as `ON DELETE CASCADE`. Reasoning: Answers to removed questions are not needed, existing quiz sessions get a copy in `fs_quiz_session.quiz_result`."
            ]
        }
    ]
}
