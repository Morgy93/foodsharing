#!/bin/bash
dir=$(dirname "$0")

# shellcheck source=./__helping-functions.sh
source "$dir"/__helping-functions.sh

# ENVS
export FS_ENV=test
export CURRENT_USER=$(id -u):$(id -g)

# set -o errexit tells the shell to exit as soon as a command exits with non-zero status, i.e. fails
set -o errexit

if [[ ! $("$dir"/docker-compose ls --filter=name='foodsharing_test' | grep 'running(12)') ]];
then
    log-header "Bringing up containers ..."
    "$dir"/docker-compose up -d

    log-header "Running composer install ..."
    exec-in-container app 'composer install'

    log-header "Create folder structur ..."
    exec-in-container app bin/console foodsharing:setup

    log-header "Reset (clear) cache ..."
    exec-in-container app "bin/console cache:clear"
    exec-in-container app "rm --recursive --force cache/.views-cache cache/di-cache.php"

    log-header "Initialize Database ..."
    sql-query mysql "drop database if exists foodsharing; create database foodsharing"

    log-header "Running migrations"
    migratedb

    log-header "Waiting for assets to be generated ..."
    wait-for-assets
    exec-in-container app "bin/console assets:install"
fi

if ! sql-query mysql 'use foodsharing'; then
    log-header "Initialize Database ..."
    sql-query mysql "drop database if exists foodsharing; create database foodsharing"

    log-header "Running migrations"
    migratedb
fi

log-header "Running tests"
exec-in-container selenium "find /home/seluser/Downloads -type f -print0 | xargs -r -n 1 -0 rm"
exec-in-container-asroot app rm --recursive --force cache/.views-cache cache/di-cache.php
exec-in-container app vendor/bin/codecept run "$@"

if [ $# -eq 0 ]; then
    log-header "Running Client tests"
    run-in-container client "yarn && yarn lint && yarn test"

    log-header "Running websocket tests"
    run-in-container websocket "yarn && yarn lint && yarn test"
fi
